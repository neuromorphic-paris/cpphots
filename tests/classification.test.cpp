#include <cpphots/classification.h>

#include <gtest/gtest.h>


class TestClassification : public ::testing::Test {

protected:

    void SetUp() override {

        realclasses = {"cl", "di", "di", "sp", "di", "he", "he", "he", "sp", "di", "he", "di", "he", "he", "he", "cl", "cl", "cl", "he", "sp", "di", "cl", "cl", "he", "di", "cl", "sp", "sp", "sp", "cl", "sp", "di", "di", "di", "cl", "he", "di", "di", "cl", "he", "sp", "di", "cl", "cl", "sp", "cl", "he", "he", "cl", "sp", "cl", "di", "sp", "he", "sp", "cl", "cl", "sp", "di", "di", "sp", "he", "di", "he", "sp", "sp", "sp", "he"};

        computed_features = {
            {135,  45,  21, 462,  77, 205, 298, 313, 443, 167, 450,  75, 150, 185, 207, 153},
            { 10,  19,  15, 430,  28, 335, 135, 397, 113, 240, 422,  73, 356,  48, 130, 225},
            { 70,  23,  41, 213,  48, 238, 315, 314, 174, 118, 279, 142, 258, 108, 172, 200},
            { 92,  53,  76, 205, 114, 610,  83, 388, 189, 649, 446,  32, 253, 234, 115, 520},
            { 32,  39,  46, 300,  73, 303, 158, 385, 127, 221, 207,  52, 344, 143, 184, 223},
            {  0,  42,  33,  56, 149,  53,   2,  58, 293,  49, 292,   0,  64,   6,  27, 310},
            { 11,  62,  31, 390,  82, 115, 131, 139, 620,  87, 291,  28, 493, 159,  82, 692},
            { 17,  61,  53, 148, 161, 146,  57, 315, 687, 156, 546,   4, 415,  36,  52, 866},
            { 95,  33,  79, 168,  58, 593,  26, 399, 156, 426, 379,  42, 244, 202, 141, 308},
            { 39,  41,  69, 285, 111, 320, 294, 420, 246, 426, 489,  42, 524,  64, 184, 645},
            {  0,  45,  42,  52, 112,  56,   1,  45, 196,  68, 537,   0,  65,   5,  29, 365},
            { 69,  37,  40, 246,  89, 325, 179, 329,  99, 202, 269,  44, 328, 116, 195, 328},
            { 32,  63,  43, 262, 150, 118,  71, 102, 583, 103, 310,  35, 444, 163,  62, 467},
            {  6,  24,  33,  12,  62,  50,   2,  55, 187,  60, 194,   0,  70,   4,  12, 108},
            {197,  62,  83, 110, 145,  84, 454, 180, 514,  76, 541,  78, 238, 375, 123, 224},
            { 74,  43,  42, 219,  90, 139, 108, 294, 652, 327, 259,  77, 195, 142, 119, 230},
            {106,  65,  24, 300, 143, 215, 284, 172, 251,  55, 225, 160,  92,  66,  69, 218},
            { 89,  41,  36, 400, 159, 292, 418, 268, 450, 118, 798, 173,  99, 100, 131, 141},
            { 69,  61,  68, 402,  96, 114, 253, 104, 441,  77, 223,  31, 459, 225, 115, 371},
            { 48,  53,  63, 270, 164, 578, 149, 432, 243, 434,1294,  83, 245, 279, 220, 749},
            { 59,  32,  64, 341, 134, 291, 298, 355, 215, 325, 598,  47, 532,  62, 153, 423},
            { 96,  35,  53, 274, 104, 315, 261, 207, 366,  46, 425, 135,  74,  59,  77,  95},
            { 88,  41,  64, 128,  54, 187,  60, 250, 264,  53, 157,  54,  82,  67, 120,  57},
            { 32,  65,  25, 479,  69,  11, 224, 350,  99,  15,  47, 160, 310, 133,  68, 446},
            { 24,  12,  10, 266,  21,  16,  37, 105,  12,  14,   6, 121, 127,  48,  74, 142},
            { 59,  59,  46, 172, 187, 100, 149, 133, 152,  36, 168, 108,  79,  51,  68, 204},
            { 21,  37,  35, 196,  51, 450,  18, 260, 180, 643, 323,   1, 269, 274,  44, 446},
            { 62,  56,  64, 218,  63, 463,  36, 337, 180, 618, 286,  23, 308, 266,  82, 334},
            { 69,  53,  37, 234, 108, 421, 335, 227, 161, 167, 626, 103, 125, 140, 190, 159},
            { 92,  64,  15, 297, 156,  50, 182, 171, 253, 145, 343, 134, 146,  60, 106, 275},
            { 14,  37,  76, 184,  41, 457,  23, 295, 161, 725, 335,   1, 314, 236,  58, 483},
            { 92,  35, 100, 329, 171, 464, 293, 446, 285, 242, 550,  99, 340, 135, 170, 262},
            {  0,  15,  51, 109,  26, 154,   1, 114,  76, 249,  76,   0, 191,   4,  62, 211},
            {  0,  22,  26, 128,  24, 168,   0, 156,  80, 269,  82,   0, 181,   6,  41, 191},
            { 66,  47,  34, 289, 135, 153, 217, 157, 159,  23, 140, 110, 121,  47,  94, 221},
            {135,  66,  56, 385, 121, 105, 489, 120, 379,  52, 201, 114, 222, 360, 164, 238},
            { 44,  24,  34, 157,  76, 210, 124, 216, 133, 211, 412,  24, 240,  49, 126, 237},
            { 74,  50,  81, 326, 145, 500, 245, 527, 270, 212, 606,  45, 405, 103, 229, 444},
            {152,  50,  28, 364,  30, 193, 353, 313, 447, 172, 639, 137, 180, 160, 192, 124},
            { 22,  66,  17, 339,  70,  63, 223, 270, 537,  54, 283,  50, 231, 243,  67, 388},
            { 99,  41,  43, 175,  32, 521,  33, 381, 126, 420, 457,  26, 212, 176, 132, 227},
            { 29,  27,  59, 225, 105, 143, 146, 203, 127, 339, 219,  16, 354,  48, 163, 440},
            { 25,  39,  60, 323,  91, 353, 173, 414, 645,  67, 368,   1, 292, 134, 177, 326},
            { 63,  72,  16, 328, 156,  70, 285, 186, 236, 126, 275, 140, 126,  95, 151, 262},
            { 81,  63,  91, 237, 165, 553, 156, 356, 219, 543,1268,  58, 314, 202, 170, 845},
            { 70,  54,  24, 298, 133,  31, 255, 176, 218, 159, 249, 153,  98,  81, 137, 176},
            { 27,  83,  44, 148, 109,  95,  65, 114, 717, 104, 364,  11, 362,  89,  86, 577},
            {127,  57,  72, 389, 152,  63, 334, 130, 445,  57, 160,  92, 191, 271,  98, 379},
            { 38,  66,  41, 401, 159, 190, 228, 223, 368, 173, 539, 131, 118,  50, 132, 232},
            { 75,  41,  41, 353, 169, 462, 447, 360, 194, 304,1106, 105, 176, 177, 255, 374},
            {  7,  39,  54, 174, 122, 161,  38, 370, 703, 409, 555,   5, 252, 115, 124, 306},
            { 41,  48,  71, 288,  93, 199, 145, 325, 159, 340, 228,  39, 452, 157, 205, 325},
            { 34,  50,  69, 116,  55, 645,  31, 319, 135, 485, 382,   0, 259, 223, 103, 429},
            { 35,  49,  28, 482,  51,  39, 222, 205, 121,  15,  58, 123, 430, 182,  75, 362},
            { 55,  44,  33, 244, 110, 226, 407, 264, 166, 315, 602, 104, 160, 109, 158, 241},
            { 70,  50,   9, 229, 114,  52, 203, 221, 184,  90, 192, 112, 135,  98, 127, 298},
            { 45,  46,  28, 372,  82,  65, 222, 217, 351, 262, 291, 107, 123,  73, 169, 112},
            { 83,  51,  86, 215,  88, 629,  52, 399, 151, 623, 602,  60, 340, 216, 156, 673},
            { 31,  26,  53, 400,  86, 329, 195, 388, 188, 396, 448,  11, 540,  67, 171, 365},
            {  2,  19,  58, 320,  58, 174, 125, 263, 126, 496, 316,  31, 441,  69,  90, 371},
            { 49,  36,  19, 203,  52, 414,  61, 327, 118, 340, 230,  30, 153, 123, 119,  86},
            { 47,  69,  48, 195, 114, 103, 105, 379, 746, 109, 398,  23, 224, 103,  55, 785},
            { 21,  12,  20, 192,  38, 107,  76,  50, 117,  65,  76,  97,  39, 119,  62,  69},
            {116,  63,  57, 244, 183, 106, 126, 285, 612,  81, 313,  41, 181, 219,  92, 351},
            { 26,  31,  47, 147,  46, 635,  12, 347, 170, 457, 370,   2, 178, 261, 101, 411},
            { 71,  49,  48, 347, 165, 471, 317, 357, 195, 501,1020,  99, 261, 235, 179, 456},
            { 74,  36,  48, 333, 121, 379, 381, 229, 183, 438, 820,  99, 175, 135, 152, 258},
            {  4,  18,  32,  32,  87,  67,  11,  50, 151,  62, 237,   0,  12,   4,   9,  19}
        };

    }

    std::vector<std::string> realclasses;

    std::vector<cpphots::Features> computed_features;

};

TEST_F(TestClassification, StandardClassifier) {

    cpphots::StandardClassifier classifier({"cl", "di", "he", "sp"});
    classifier.setClassFeatures("cl", { 45,  46,  28, 372,  82,  65, 222, 217, 351, 262, 291, 107, 123,  73, 169, 112});
    classifier.setClassFeatures("di", { 41,  48,  71, 288,  93, 199, 145, 325, 159, 340, 228,  39, 452, 157, 205, 325});
    classifier.setClassFeatures("he", { 32,  63,  43, 262, 150, 118,  71, 102, 583, 103, 310,  35, 444, 163,  62, 467});
    classifier.setClassFeatures("sp", { 92,  53,  76, 205, 114, 610,  83, 388, 189, 649, 446,  32, 253, 234, 115, 520});

    double acc = 0.0;

    for (unsigned int i = 0; i < 68; i++) {
        if (classifier.classifyName(computed_features[i]) == realclasses[i])
            acc += 1.0;
    }

    acc = (acc - 4) / (68 - 4);

    EXPECT_NEAR(acc, 0.734375, 0.01);

}

TEST_F(TestClassification, NormalizedClassifier) {

    cpphots::NormalizedClassifier classifier({"cl", "di", "he", "sp"});
    classifier.setClassFeatures("cl", { 45,  46,  28, 372,  82,  65, 222, 217, 351, 262, 291, 107, 123,  73, 169, 112});
    classifier.setClassFeatures("di", { 41,  48,  71, 288,  93, 199, 145, 325, 159, 340, 228,  39, 452, 157, 205, 325});
    classifier.setClassFeatures("he", { 32,  63,  43, 262, 150, 118,  71, 102, 583, 103, 310,  35, 444, 163,  62, 467});
    classifier.setClassFeatures("sp", { 92,  53,  76, 205, 114, 610,  83, 388, 189, 649, 446,  32, 253, 234, 115, 520});

    double acc = 0.0;

    for (unsigned int i = 0; i < 68; i++) {
        if (classifier.classifyName(computed_features[i]) == realclasses[i])
            acc += 1.0;
    }

    acc = (acc - 4) / (68 - 4);

    EXPECT_NEAR(acc, 0.8125, 0.01);

}

TEST_F(TestClassification, BhattacharyyaClassifier) {

    cpphots::BhattacharyyaClassifier classifier({"cl", "di", "he", "sp"});
    classifier.setClassFeatures("cl", { 45,  46,  28, 372,  82,  65, 222, 217, 351, 262, 291, 107, 123,  73, 169, 112});
    classifier.setClassFeatures("di", { 41,  48,  71, 288,  93, 199, 145, 325, 159, 340, 228,  39, 452, 157, 205, 325});
    classifier.setClassFeatures("he", { 32,  63,  43, 262, 150, 118,  71, 102, 583, 103, 310,  35, 444, 163,  62, 467});
    classifier.setClassFeatures("sp", { 92,  53,  76, 205, 114, 610,  83, 388, 189, 649, 446,  32, 253, 234, 115, 520});

    double acc = 0.0;

    for (unsigned int i = 0; i < 68; i++) {
        if (classifier.classifyName(computed_features[i]) == realclasses[i])
            acc += 1.0;
    }

    acc = (acc - 4) / (68 - 4);

    EXPECT_NEAR(acc, 0.78125, 0.01);

}
